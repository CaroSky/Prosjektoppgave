@using SharedModels.Entities
@using SharedModels.ViewModels
@using Blazor.Data;

@page "/notifications"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SearchService SearchService
@inject NotificationService NotificationService


<h3>Notifications</h3>

@if (posts == null)
{
    <p>No notifications...</p>
}

else
{
    <button class="btn btn-primary mt-2" @onclick="@(() => ClearNotifications())">Clear all notifications</button>
    <br/>
    <br />
    @foreach (var post in posts)
    {

        <div class="card post-preview mb-4">
            <div class="card-body">
                <h4 class="card-title">@post.Title</h4>
                <p class="card-text"><small class="text-muted">@post.OwnerUsername posted on @post.Created.ToString("yyyy-MM-dd")</small></p>
                <p class="card-text">@post.Content</p>

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" disabled="disabled" @bind="post.IsCommentAllowed"/>
                    <label class="form-check-label" for="commentCheckbox">Allow Comments</label>
                </div>
            </div>
                @if (post.ImageBase64 != "")
                {
                    <div>
                        <img src="@($"data:image/png;base64,{post.ImageBase64}")"/>
                    </div>
                }
                <div>
                    <button class="btn btn-primary mt-2" @onclick="@(() => NavigateToPost(post.PostId))">See Post</button>
                    <button class="btn btn-primary mt-2" @onclick="@(() => ClearOneNotification(post.PostId))">Clear this notification</button>

            </div>
        </div>
    }



}


@code {

    [Parameter]
    public string SearchQuery { get; set; }
    private List<SharedModels.Entities.Post> posts;
    private SharedModels.Entities.Post _post = new SharedModels.Entities.Post();
    private PostCreateViewModel _viewPost = new PostCreateViewModel();
    private PostEditViewModel _viewEditPost = new SharedModels.ViewModels.PostEditViewModel();
    private string _titleDialog;
    private PostDialogBox _dialog;
    private int notificationCount;


    protected override async Task OnInitializedAsync()
    {
        await GetNotifications();
    }

    private async Task GetNotifications()
    {
        var postEnumerable = await NotificationService.GetNotificationPosts();
        if (postEnumerable.Count() == 0)
        {
            posts = null;

        }
        else
        {
            posts = postEnumerable.ToList();
        }

        notificationCount = await NotificationService.GetNotificationsCount();
    }

    private void NavigateToPost(int postId)
    {
        NavigationManager.NavigateTo($"/notificationSeePost/{postId}");
    }

    private async Task ClearNotifications()
    {
        await NotificationService.DeleteAllNotificationForUser();
        NavigationManager.NavigateTo($"/blogs");
       
    }

    private async Task ClearOneNotification(int postId)
    {
        await NotificationService.DeleteNotification(postId);
        await GetNotifications();
    }

 

}


