@page "/blogs"
@using SharedModels.Entities 
@using Blazor.Data
@using ViewModels
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.Identity

@inject BlogService BlogService
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject SearchService SearchService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider



<h3>Blog Posts</h3>


@if (blogs == null)
{
    <p>Loading...</p>
}
else
{
    <input @bind="_searchQuery" @oninput="SearchSuggestions" />
    <button class="btn btn-success ml-auto"  @onclick="Search">Search post</button>
    <ul>
        @foreach (var suggestion in _suggestions)
        {
            <li @onclick="() => SelectSuggestion(suggestion)">@suggestion</li>
        }
    </ul>
    <br/>
    <br />
    @if (user.Identity.IsAuthenticated)
    {
        <button class="btn btn-success ml-auto" @onclick="@(() => CreateBlogDialog("Create"))">Add a blog</button>
    }

    <br/>
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th>Created</th>
            <th>OwnerId</th>
                <th class="text-center">New post allowed</th>
            <th></th>
        </tr>
        </thead>
        <tbody>

        @foreach (var blog in blogs)
        {

                <tr>
                <td>
                        <a class="btn btn-outline-primary" @onclick="@(() => NavigateToPosts(blog.BlogId))">@blog.Title</a>
                </td>
                <td>@blog.Content</td>
                <td>@blog.Created</td>
                    <td>@blog.OwnerUsername</td>
                    <td class="text-center">
                        <div class="form-check d-flex justify-content-center align-items-center">
                            <input class="form-check-input" type="checkbox" disabled="disabled" @bind="blog.IsPostAllowed"/>
                        </div>
                    </td>
                        @if (user.Identity.IsAuthenticated)
                        {
                        <td>
                            @if (IsSubscribed(blog.BlogId))
                            {
                                <button class="btn btn-danger" @onclick="@(() => Unsubscribe(blog.BlogId))">Unsubscribe</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="@(() => Subscribe(blog.BlogId))">Subscribe</button>
                            }
                        </td>
                        }
                    
                    @if (blog.OwnerId == _userId)
                    {
                        <td>
                            <button class="btn btn-success mb-2" @onclick="@(() => EditBlogDialog("Update", blog))">Update</button>
                            <button class="btn btn-success" @onclick="@(() => DeleteBlog(blog))">Delete</button>
                        </td>
                    }
            </tr>
        }

        </tbody>
        </table>
}


<BlogDialogBox Title="@_titleDialog" blog="@_viewBlog" OnCancel="CancelDialog" OnSave="OnSaveDialog" @ref="_dialog"></BlogDialogBox>

@code {
    private List<SharedModels.Entities.Blog> blogs;
    private SharedModels.Entities.Blog _blog = new SharedModels.Entities.Blog();
    private BlogViewModel _viewBlog = new BlogViewModel();
    private string _titleDialog;
    private BlogDialogBox _dialog;
    private IEnumerable<SharedModels.Entities.Post> selectedPosts;
    private string _searchQuery;
    private ClaimsPrincipal user;
    private string _username;
    private string _userId;
    private Dictionary<int, bool> _blogSubscriptionStatus;
    private List<string> _suggestions;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        _username = user?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
        _userId = user?.FindFirst(JwtRegisteredClaimNames.NameId)?.Value;
        var blogEnumerable = await BlogService.GetBlogsAsync();
        blogs = blogEnumerable.ToList();
        _titleDialog = "title";
        _suggestions = new List<String>();
        if (user.Identity.IsAuthenticated)
        {
        _blogSubscriptionStatus = await BlogService.GetAllSubscriptionStatusesAsync();
        }
        else
        {
            _blogSubscriptionStatus = new Dictionary<int, bool>();
        }

    }

    protected void OnPropertyChanged()
    {
        StateHasChanged();
    }

    private async Task OnSaveDialog()
    {
        if (_titleDialog == "Create")
        {
          
            _blog.Title = _viewBlog.Title;
            _blog.Content = _viewBlog.Content;
            _blog.IsPostAllowed = _viewBlog.IsPostAllowed;
            await BlogService.PostBlogAsync(_blog);
            var blogEnumerable = await BlogService.GetBlogsAsync();
            blogs = blogEnumerable.ToList();
            _dialog.CloseDialog();
        }
        else if (_titleDialog == "Update")
        {
            _blog.Title = _viewBlog.Title;
            _blog.Content = _viewBlog.Content;
            _blog.IsPostAllowed = _viewBlog.IsPostAllowed;
            await BlogService.PutBlogAsync(_blog);
            var blogEnumerable = await BlogService.GetBlogsAsync();
            blogs = blogEnumerable.ToList();
            _dialog.CloseDialog();
        }
    }


    private void EditBlogDialog(string title, SharedModels.Entities.Blog blog)
    {
        _blog = blog;
        _viewBlog = new BlogViewModel()
        {
            BlogId = blog.BlogId,
            Title = blog.Title,
            Content = blog.Content,
            Created = blog.Created,
            IsPostAllowed = blog.IsPostAllowed
        };
        _titleDialog = title;
        _dialog.Show();
    }


    void CancelDialog()
    {
        _dialog.CloseDialog();
    }


    private void CreateBlogDialog(string title)
    {
        _blog = new SharedModels.Entities.Blog()
        {
            Created = DateTime.Now,
            OwnerId = "0",
            IsPostAllowed = true,
            OwnerUsername = ""

        };
        _viewBlog = new BlogViewModel()
        {
            Created = DateTime.Now,
            IsPostAllowed = true
        };
        _titleDialog = title;
        _dialog.Show();
    }

    async Task DeleteBlog(SharedModels.Entities.Blog blog)
    {
        await BlogService.DeleteBlogAsync(blog);
        var blogEnumerable = await BlogService.GetBlogsAsync();
        blogs = blogEnumerable.ToList();

    }


    private void NavigateToPosts(int blogId)
    {
        NavigationManager.NavigateTo($"/post/{blogId}");
    }

    private void Search()
    {
        if (!string.IsNullOrEmpty(_searchQuery))
        {
            NavigationManager.NavigateTo($"/search/{Uri.EscapeDataString(_searchQuery)}");
        }
    }

    private bool IsSubscribed(int blogId)
    {
        return _blogSubscriptionStatus.TryGetValue(blogId, out var isSubscribed) && isSubscribed;
    }

    private async Task Subscribe(int blogId)
    {
        await BlogService.SubscribeToBlogAsync(blogId);
        _blogSubscriptionStatus[blogId] = true;
        StateHasChanged();
    }

    private async Task Unsubscribe(int blogId)
    {
        await BlogService.UnsubscribeFromBlogAsync(blogId);
        _blogSubscriptionStatus[blogId] = false;
        StateHasChanged();
    }

    private async Task SearchSuggestions(ChangeEventArgs args)
    {
    // Call backend API to get suggestions
        _searchQuery = args.Value.ToString();
        _suggestions = await BlogService.SearchSuggestions(_searchQuery);
        //StateHasChanged(); // Ensure UI is updated

    }

    private void SelectSuggestion(string suggestion)
    {
        Console.WriteLine($"The _searchQuery is {_searchQuery}");
        _searchQuery = suggestion;
        _suggestions.Clear(); // Clear the suggestions after selecting one
    }


}