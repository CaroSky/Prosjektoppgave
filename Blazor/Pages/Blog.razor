@page "/blogs"
@using SharedModels.Entities 
@using Blazor.Data
@using ViewModels
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.Identity

@inject BlogService BlogService
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject SearchService SearchService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

<h3>Blog List</h3>

@if (blogs == null)
{
    <p>Loading...</p>
}
else
{
    <div class="input-group mb-3">
        <input type="text" class="form-control" @bind="_searchQuery" @oninput="SearchSuggestions" placeholder="Search...">
        <div class="input-group-append">
            <button class="btn btn-primary" type="button" @onclick="Search">Search</button>
        </div>
    </div>

    @if (_suggestions.Any())
    {
        <div class="dropdown-menu show" style="position: absolute; z-index: 1000;">
            @foreach (var suggestion in _suggestions)
            {
                <a class="dropdown-item" @onclick="() => SelectSuggestion(suggestion)">
                    @suggestion
                </a>
            }
        </div>
    }

    @if (user.Identity.IsAuthenticated)
    {
        <h4>My Blogs</h4>
        <button class="btn btn-success ml-auto" @onclick="@(() => CreateBlogDialog("Create"))">Add a blog</button>
        <table class="table border border-dark">
            <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Created</th>
                <th>Owner</th>
                <th>New post allowed</th>
                <th>Manage blog</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var blog in blogs.Where(b => b.OwnerId == _userId))
                {

                    <tr>
                        <td>
                            <a href="post/@blog.BlogId">@blog.Title</a>
                        </td>
                        <td>@blog.Content</td>
                        <td>@blog.Created</td>
                        <td>@blogOwnerUsernames[blog.BlogId]</td>
                        <td>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" disabled="disabled" @bind="blog.IsPostAllowed" />
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(() => EditBlogDialog("Update", blog))">Update</button>
                            <button class="btn btn-danger" @onclick="@(() => DeleteBlog(blog))">Delete</button>
                        </td>                  
                    </tr>
                }
            </tbody>
        </table>
    }

    <h4>Other Blogs</h4>
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Created</th>
            <th>Owner</th>
            <th>New post allowed</th>
            <th>Subscribe</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var blog in blogs.Where(b => b.OwnerId != _userId))
        {
            <tr>
            <td>
                <a href="post/@blog.BlogId">@blog.Title</a>
            </td>
            <td>@blog.Content</td>
            <td>@blog.Created</td>
            <td>@blogOwnerUsernames[blog.BlogId]</td>
            <td>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" disabled="disabled" @bind="blog.IsPostAllowed" />
                </div>
            </td>
            @if (user.Identity.IsAuthenticated)
            {
                <td>
                @if (IsSubscribed(blog.BlogId))
                {
                    <button class="btn btn-outline-danger" @onclick="@(() => Unsubscribe(blog.BlogId))">Unsubscribe</button>
                }
                else
                {
                    <button class="btn btn-outline-success" @onclick="@(() => Subscribe(blog.BlogId))">Subscribe</button>
                }
                </td>
            }
            </tr>
        }
        </tbody>
        </table>
}


<BlogDialogBox Title="@_titleDialog" blog="@_viewBlog" OnCancel="CancelDialog" OnSave="OnSaveDialog" @ref="_dialog"></BlogDialogBox>

@code {
    private List<SharedModels.Entities.Blog> blogs;
    private SharedModels.Entities.Blog _blog = new SharedModels.Entities.Blog();
    private BlogViewModel _viewBlog = new BlogViewModel();
    private string _titleDialog;
    private BlogDialogBox _dialog;
    private IEnumerable<SharedModels.Entities.Post> selectedPosts;
    private string tag;
    private ClaimsPrincipal user;
    private string _username;
    private string _userId;
    private Dictionary<int, bool> _blogSubscriptionStatus;
    private Dictionary<int, string> blogOwnerUsernames = new Dictionary<int, string>();
    private string _searchQuery;
    private List<string> _suggestions;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        _username = user?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
        _userId = user?.FindFirst(JwtRegisteredClaimNames.NameId)?.Value;
        var blogEnumerable = await BlogService.GetBlogsAsync();
        blogs = blogEnumerable.ToList();
        _titleDialog = "title";
        _suggestions = new List<String>();
        if (user.Identity.IsAuthenticated)
        {
        _blogSubscriptionStatus = await BlogService.GetAllSubscriptionStatusesAsync();
        }
        else
        {
            _blogSubscriptionStatus = new Dictionary<int, bool>();
        }
        foreach (var blog in blogs)
        {
            var username = await BlogService.GetUsernameByOwnerIdAsync(blog.OwnerId);
            blogOwnerUsernames[blog.BlogId] = username ?? "Unknown";
        }

    }

    private async Task OnSaveDialog()
    {
        if (_titleDialog == "Create")
        {
          
            _blog.Title = _viewBlog.Title;
            _blog.Content = _viewBlog.Content;
            _blog.IsPostAllowed = _viewBlog.IsPostAllowed;
            await BlogService.PostBlogAsync(_blog);
            var blogEnumerable = await BlogService.GetBlogsAsync();
            blogs = blogEnumerable.ToList();
            _dialog.CloseDialog();
        }
        else if (_titleDialog == "Update")
        {
            _blog.Title = _viewBlog.Title;
            _blog.Content = _viewBlog.Content;
            _blog.IsPostAllowed = _viewBlog.IsPostAllowed;
            await BlogService.PutBlogAsync(_blog);
            var blogEnumerable = await BlogService.GetBlogsAsync();
            blogs = blogEnumerable.ToList();
            _dialog.CloseDialog();
        }
    }


    private void EditBlogDialog(string title, SharedModels.Entities.Blog blog)
    {
        _blog = blog;
        _viewBlog = new BlogViewModel()
        {
            BlogId = blog.BlogId,
            Title = blog.Title,
            Content = blog.Content,
            Created = blog.Created,
            IsPostAllowed = blog.IsPostAllowed
        };
        _titleDialog = title;
        _dialog.Show();
    }


    void CancelDialog()
    {
        _dialog.CloseDialog();
    }


    private void CreateBlogDialog(string title)
    {
        _blog = new SharedModels.Entities.Blog()
        {
            Created = DateTime.Now,
            OwnerId = "0",
            IsPostAllowed = true

        };
        _viewBlog = new BlogViewModel()
        {
            Created = DateTime.Now,
            IsPostAllowed = true
        };
        _titleDialog = title;
        _dialog.Show();
    }

    async Task DeleteBlog(SharedModels.Entities.Blog blog)
    {
        await BlogService.DeleteBlogAsync(blog);
        var blogEnumerable = await BlogService.GetBlogsAsync();
        blogs = blogEnumerable.ToList();

    }

   // private async Task LoadPosts(int blogId)
    //{
      //  selectedPosts = await PostService.GetPostsByBlogIdAsync(blogId);
       // selectedBlogTitle = blogs.FirstOrDefault(b => b.BlogId == blogId)?.Title;
    //}

    private void NavigateToPosts(int blogId)
    {
        NavigationManager.NavigateTo($"/post/{blogId}");
    }

    private void Search()
    {
        if (!string.IsNullOrEmpty(_searchQuery))
        {
            NavigationManager.NavigateTo($"/search/{Uri.EscapeDataString(_searchQuery)}");
        }
    }

    private bool IsSubscribed(int blogId)
    {
        return _blogSubscriptionStatus.TryGetValue(blogId, out var isSubscribed) && isSubscribed;
    }

    private async Task Subscribe(int blogId)
    {
        await BlogService.SubscribeToBlogAsync(blogId);
        _blogSubscriptionStatus[blogId] = true;
        StateHasChanged();
    }

    private async Task Unsubscribe(int blogId)
    {
        await BlogService.UnsubscribeFromBlogAsync(blogId);
        _blogSubscriptionStatus[blogId] = false;
        StateHasChanged();
    }

    private async Task SearchSuggestions(ChangeEventArgs args)
    {
   
        _searchQuery = args.Value.ToString();
        _suggestions = await BlogService.SearchSuggestions(_searchQuery);

    }

    private void SelectSuggestion(string suggestion)
    {
        _searchQuery = suggestion;
        _suggestions.Clear(); 
    }

}