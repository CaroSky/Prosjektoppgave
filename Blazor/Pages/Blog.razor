
@using SharedModels.Entities 
@using Blazor.Data
@using ViewModels
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.Identity

@inject BlogService BlogService
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject SearchService SearchService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject SignalRService SignalRService


    <div class="col-sm-9">
        <h4><small>RECENT BLOGS</small></h4>
    </div>

@if (blogs == null)
{
    <p>Loading...</p>
    @if (user.Identity.IsAuthenticated)
    {
        <button class="btn btn-success ml-auto" @onclick="@(() => CreateBlogDialog("Create"))">Add a blog</button>
    }
}
else
{
    
    @if (user.Identity.IsAuthenticated)
    {
        <button class="btn btn-success ml-auto" @onclick="@(() => CreateBlogDialog("Create"))">Add a blog</button>
    }
    
    

   

        @foreach (var blog in blogs)
        {
        var blogClass = index % 2 == 0 ? "blog-post blog-post-even" : "blog-post blog-post-odd";

        <div class="@blogClass">
            <h2>
                <a class="blog-post-title" @onclick="@(() => NavigateToPosts(blog.BlogId))">@blog.Title</a>
            </h2>
            <p class="blog-post-meta">@blog.Created by <a href="#">@blog.OwnerId</a></p>
            <p>@blog.Content</p>

        <div class="d-flex justify-content-between align-items-center">
            @if (user.Identity.IsAuthenticated)
            {
                <button class="btn btn-sm btn-outline-secondary"
                @onclick="@(() => HandleSubscription(blog.BlogId))">
                    @(IsSubscribed(blog.BlogId) ? "Unsubscribe" : "Subscribe")
                </button>
            }
            @if (blog.OwnerId == _userId)
            {
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group">
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => EditBlogDialog("Update", blog))">Edit</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => DeleteBlog(blog))">Delete</button>
                    </div>
                    <small class="text-muted">@blog.Created.ToString("dd MMM yyyy")</small>
                </div>
                <div>
                    <input class="form-check-input" type="checkbox"
                           disabled="disabled" @bind="blog.IsPostAllowed" />
                    <label class="form-check-label">Post Allowed</label>
                </div>
            }
            </div>
        </div>
        index++;
        }

     
}


<BlogDialogBox Title="@_titleDialog" blog="@_viewBlog" OnCancel="CancelDialog" OnSave="OnSaveDialog" @ref="_dialog"></BlogDialogBox>

@code {
    private List<SharedModels.Entities.Blog> blogs;
    private List<string> toasts = new List<string>();
    private SharedModels.Entities.Blog _blog = new SharedModels.Entities.Blog();
    private BlogViewModel _viewBlog = new BlogViewModel();
    private string _titleDialog;
    private BlogDialogBox _dialog;
    private IEnumerable<SharedModels.Entities.Post> selectedPosts;
    private string tag;
    private ClaimsPrincipal user;
    private string _username;
    private string _userId;
    private Dictionary<int, bool> _blogSubscriptionStatus;
    private int index = 0;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        _username = user?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
        _userId = user?.FindFirst(JwtRegisteredClaimNames.NameId)?.Value;
        var blogEnumerable = await BlogService.GetBlogsAsync();
        blogs = blogEnumerable.ToList();
        _titleDialog = "title";

        if (user.Identity.IsAuthenticated)
        {
        _blogSubscriptionStatus = await BlogService.GetAllSubscriptionStatusesAsync();
          //  await SignalRService.InitializeConnection();
        }
        else
        {
            _blogSubscriptionStatus = new Dictionary<int, bool>();
        }

    }

    private async Task OnSaveDialog()
    {
        if (_titleDialog == "Create")
        {
          
            _blog.Title = _viewBlog.Title;
            _blog.Content = _viewBlog.Content;
            _blog.IsPostAllowed = _viewBlog.IsPostAllowed;
            await BlogService.PostBlogAsync(_blog);
            var blogEnumerable = await BlogService.GetBlogsAsync();
            blogs = blogEnumerable.ToList();
            _dialog.CloseDialog();
        }
        else if (_titleDialog == "Update")
        {
            _blog.Title = _viewBlog.Title;
            _blog.Content = _viewBlog.Content;
            _blog.IsPostAllowed = _viewBlog.IsPostAllowed;
            await BlogService.PutBlogAsync(_blog);
            var blogEnumerable = await BlogService.GetBlogsAsync();
            blogs = blogEnumerable.ToList();
            _dialog.CloseDialog();
        }
    }


    private void EditBlogDialog(string title, SharedModels.Entities.Blog blog)
    {
        _blog = blog;
        _viewBlog = new BlogViewModel()
        {
            BlogId = blog.BlogId,
            Title = blog.Title,
            Content = blog.Content,
            Created = blog.Created,
            IsPostAllowed = blog.IsPostAllowed
        };
        _titleDialog = title;
        _dialog.Show();
    }


    void CancelDialog()
    {
        _dialog.CloseDialog();
    }


    private void CreateBlogDialog(string title)
    {
        _blog = new SharedModels.Entities.Blog()
        {
            Created = DateTime.Now,
            OwnerId = "0",
            IsPostAllowed = true

        };
        _viewBlog = new BlogViewModel()
        {
            Created = DateTime.Now,
            IsPostAllowed = true
        };
        _titleDialog = title;
        _dialog.Show();
    }

    async Task DeleteBlog(SharedModels.Entities.Blog blog)
    {
        await BlogService.DeleteBlogAsync(blog);
        var blogEnumerable = await BlogService.GetBlogsAsync();
        blogs = blogEnumerable.ToList();

    }

 

    private void NavigateToPosts(int blogId)
    {
        NavigationManager.NavigateTo($"/post/{blogId}");
    }

    private void Search()
    {
        if (!string.IsNullOrEmpty(tag))
        {
            NavigationManager.NavigateTo($"/search/{Uri.EscapeDataString(tag)}");
        }
    }

    private bool IsSubscribed(int blogId)
    {
        return _blogSubscriptionStatus.TryGetValue(blogId, out var isSubscribed) && isSubscribed;
    }

    private async Task Subscribe(int blogId)
    {
        await BlogService.SubscribeToBlogAsync(blogId);
        _blogSubscriptionStatus[blogId] = true;
        StateHasChanged();
    }

    private async Task Unsubscribe(int blogId)
    {
        await BlogService.UnsubscribeFromBlogAsync(blogId);
        _blogSubscriptionStatus[blogId] = false;
        StateHasChanged();
    }

    private async Task HandleSubscription(int blogId)
    {
        if (IsSubscribed(blogId))
        {
            await Unsubscribe(blogId);
        }
        else
        {
            await Subscribe(blogId);
        }
    }
   
    
    private void AddToastMessage(string message)
    {
        toasts.Add(message);
        Console.WriteLine($"Toast added: {message}");
        Console.WriteLine($"Total toasts: {toasts.Count}");
        StateHasChanged(); // Tvinger komponenten til å oppdatere UI
    }

    private void RemoveToast(string message)
    {
        toasts.Remove(message);
        StateHasChanged();
    }
    //Unngå minnelekasjer: 
   public void Dispose()
   {
        SignalRService.OnMessageReceived -= AddToastMessage;
    }

}