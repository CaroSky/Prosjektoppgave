@using SharedModels.Entities
@using SharedModels.ViewModels
@using Blazor.Data;
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using WebAPI.Migrations

@page "/searchSeePost/{Id:int}/{SearchQuery}"

@inject NavigationManager NavigationManager
@inject PostService PostService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider



<div class="d-flex justify-content-between">
        <button class="btn btn-primary" @onclick="@(() => NavigateToSearchPosts())">Go back to search list</button>
</div>



@if (posts == null)
{
    <p>Loading posts...</p>
}

else
{

    @foreach (var post in posts)
    {
        <div class="card post-preview mb-4">
            <div class="card-body">
                <h4 class="card-title">@post.Title</h4>
                <p class="card-text">@post.Content</p>
                <p class="card-text"><small class="text-muted">@post.OwnerUsername posted on @post.Created.ToString("yyyy-MM-dd")</small></p>

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" disabled="disabled" @bind="post.IsCommentAllowed" />
                    <label class="form-check-label" for="commentCheckbox">Allow Comments</label>
                </div>

                <button class="btn btn-primary mt-2" @onclick="@(() => NavigateToComments(post.PostId))">See Comments</button>

                @if (post.OwnerId == _userId)
                {
                    <div class="mt-2">
                        <button class="btn btn-secondary" @onclick="@(() => EditPostDialog("Update", post.PostId, post))">Edit</button>
                        <button class="btn btn-danger ml-2" @onclick="@(() => DeletePost(post.PostId))">Delete</button>
                    </div>
                }
            </div>
        </div>

    }
   


}
<PostDialogBox Title="Details"
               post="@_viewEditPost"
               OnCancel="CancelPostDialog"
               OnSave="OnSavePostDialog"
@ref="_dialog"></PostDialogBox>


@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string SearchQuery { get; set; }
    private SharedModels.Entities.Post _post = new SharedModels.Entities.Post();
    private PostCreateViewModel _viewPost = new PostCreateViewModel();
    private PostEditViewModel _viewEditPost = new SharedModels.ViewModels.PostEditViewModel();
    private PostDialogBox _dialog;
    private PostIndexViewModel postIndexViewModel;
    private bool allowed;
    private IEnumerable<SharedModels.Entities.Post> posts;
    private ClaimsPrincipal user;
    private string _username;
    private string _userId;
    private string _blogTitle;
    private bool _isInSearchMode;
    private string _searchQuery;
    private int _postId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        _username = user?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
        _userId = user?.FindFirst(JwtRegisteredClaimNames.NameId)?.Value;
        _postId = Id;
        await GetPost(Id);
        _searchQuery = SearchQuery;
    }

    private void CancelPostDialog()
    {
        _dialog.CloseDialog();
    }

    private async Task OnSavePostDialog()
    {
        // Send PostEditViewModel direkte
        Console.WriteLine($"Updating post with ID {_viewEditPost.PostId}...");
        await PostService.UpdatePostAsync(_viewEditPost.PostId, _viewEditPost);
        Console.WriteLine($"Post with ID {_viewEditPost.PostId} updated.");
        Console.WriteLine("Posts updated after save operation.");
        await GetPost(_postId);
        _dialog.CloseDialog();
        Console.WriteLine("Dialog closed.");
    }


    private async Task GetPost(int postId)
    {
        Console.WriteLine($"BlogId when getting the posts: {postId}.");
        Console.WriteLine("In search mode");
        var postIndexViewModel = await PostService.GetPostByPostIdAsync(postId);
        posts = postIndexViewModel.Posts;
        _searchQuery = SearchQuery;
    }


    private async Task DeletePost(int postId)
    {
       
            var success = await PostService.DeletePostAsync(postId);
            if (success)
            {
                // Oppdater listen over innlegg her, eller naviger brukeren til en annen side
                NavigateToSearchPosts();
            }
            else
            {
                // Vis en feilmelding til brukeren
            }
        }
    


    private void EditPostDialog(string title, int postId, SharedModels.Entities.Post post)
    {
        _post = post;
        _viewEditPost = new PostEditViewModel()
            {
                PostId = postId, // Sett postens ID
                BlogId = Id,
                Title = post.Title,
                Content = post.Content,
                Created = post.Created,
                IsCommentAllowed = post.IsCommentAllowed,
                OwnerId = post.OwnerId,
                OwnerUsername = post.OwnerUsername
                    
            };
        // Legg til loggmeldinger for å sjekke verdier
        Console.WriteLine("EditPostDialog - Start");
        _dialog.Show();
    }



    void CancelDialog()
    {
        _dialog.CloseDialog();
    }

    private void NavigateToComments(int postId)
    {
        NavigationManager.NavigateTo($"/searchSeeComment/{postId}/{_searchQuery}");
    }


    private void NavigateToSearchPosts()
    {
        NavigationManager.NavigateTo($"/search/{_searchQuery}");
    }
}


