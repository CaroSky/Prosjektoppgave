@using SharedModels.Entities
@using SharedModels.ViewModels
@using Blazor.Data;
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;

@page "/post/{Id:int}"

@inject NavigationManager NavigationManager
@inject PostService PostService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

@if (posts == null)
{
    <p>Loading posts...</p>
}

else
{

    @if (allowed && user.Identity.IsAuthenticated)
    {

        <button class="btn btn-success ml-auto" @onclick="@(() => CreatePostDialog("Create"))">Add New Post</button>
    }
    @foreach (var post in posts)
    {
        <div class="post-preview">
            <h4>@post.Title</h4>
            <p>@post.Content</p>
            <p>@post.Created.ToString("yyyy-MM-dd")</p>

            <!-- Display the image if ImageBase64 is not empty -->
            @if (!string.IsNullOrWhiteSpace(post.ImageBase64))
            {
                <img src="@($"data:image/jpeg;base64,{post.ImageBase64}")" alt="Image" class="img-thumbnail" width="400" height="300" />
            }
            <button class="btn btn-primary" @onclick="@(() => NavigateToComments(post.PostId))">View</button>
            <button class="btn btn-primary" @onclick="@(() => ToggleLikePost(post))">
                @(likeStatusCache.TryGetValue(post.PostId, out var isLiked) && isLiked ? "Unlike" : "Like")
            </button>


        @if (post.OwnerId == _userId)
        {

            <button class="btn btn-secondary" @onclick="@(() => EditPostDialog("Update", post.PostId, post))">Edit</button>

            <button class="btn btn-danger" @onclick="@(() => DeletePost(post.PostId))">Delete</button>
        }
        </div>
        <span class="likes-count" @onclick="@(() => ToggleShowLikedUsernames(post.PostId))">
            Likes: @(likesByPostIdCache.ContainsKey(post.PostId)
         ? (showLikedUsernames.ContainsKey(post.PostId) && showLikedUsernames[post.PostId]
         ? string.Join(", ", GetLikedUsernames(post.PostId))
         : GetLikesCount(post.PostId).ToString())
         : "0")
        </span>

    }

}
<PostDialogBox Title="@_titleDialog"
               post="@_viewEditPost"
               OnCancel="CancelPostDialog"
               OnSave="OnSavePostDialog"
               OnImageUpload="HandleImageUploadAsync"
@ref="_dialog"></PostDialogBox>


@code {
    [Parameter]
    public int Id { get; set; }
    //private List<SharedModels.Entities.Post> posts;
    private SharedModels.Entities.Post _post = new SharedModels.Entities.Post();
    private PostCreateViewModel _viewPost = new PostCreateViewModel();
    private PostEditViewModel _viewEditPost = new SharedModels.ViewModels.PostEditViewModel();
    private string _titleDialog;
    private PostDialogBox _dialog;
    private PostIndexViewModel postIndexViewModel;
    private bool allowed;
    private IEnumerable<SharedModels.Entities.Post> posts;
    private ClaimsPrincipal user;
    private string _username;
    private string _userId;
    private Dictionary<int, bool> likeStatusCache = new Dictionary<int, bool>();
    private Dictionary<int, LikeInfo> likesByPostIdCache = new Dictionary<int, LikeInfo>();
    private Dictionary<int, bool> showLikedUsernames = new Dictionary<int, bool>();



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        _username = user?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
        _userId = user?.FindFirst(JwtRegisteredClaimNames.NameId)?.Value;
        //posts = await PostService.GetPostsByBlogIdAsync(Id);
        await GetPostsForBlog(Id);

        _titleDialog = "title";
    }

    private void CancelPostDialog()
    {
        _dialog.CloseDialog();
    }

    private async Task OnSavePostDialog()
    {
        if (_titleDialog == "Create")
        {
            // Konverter fra PostEditViewModel til PostCreateViewModel
            //EditViewmodel er i dialogboxen siden den inneholder alle verdiene edit og create trenger
            var createViewModel = new PostCreateViewModel
                {
                    Title = _viewEditPost.Title,
                    Content = _viewEditPost.Content,
                    BlogId = _viewEditPost.BlogId,
                    IsCommentAllowed = _viewEditPost.IsCommentAllowed,
                    ImageBase64 = _viewEditPost.ImageBase64
                };

            Console.WriteLine("Creating new post...");
            await PostService.CreatePostAsync(createViewModel);
            Console.WriteLine("New post created.");
        }
        else if (_titleDialog == "Update")
        {
            // Send PostEditViewModel direkte
            Console.WriteLine($"Updating post with ID {_viewEditPost.PostId}...");
            await PostService.UpdatePostAsync(_viewEditPost.PostId, _viewEditPost);
            Console.WriteLine($"Post with ID {_viewEditPost.PostId} updated.");
        }

        await GetPostsForBlog(Id);
        Console.WriteLine("Posts updated after save operation.");
        _dialog.CloseDialog();
        Console.WriteLine("Dialog closed.");
    }


    private async Task GetPostsForBlog(int blogId)
    {
        var postIndexViewModel = await PostService.GetPostsByBlogIdAsync(blogId);
        posts = postIndexViewModel.Posts;
        allowed = postIndexViewModel.IsPostAllowed;

        // Update the like status cache directly here
        likeStatusCache.Clear();
        if (postIndexViewModel.UserLiked != null)
        {
            foreach (var kvp in postIndexViewModel.UserLiked)
            {
                likeStatusCache[kvp.Key] = kvp.Value;
            }
        }

        // Update the likesByPostIdCache with likes count and usernames
        likesByPostIdCache.Clear();
        if (postIndexViewModel.LikesByPostId != null)
        {
            foreach (var kvp in postIndexViewModel.LikesByPostId)
            {
                // Get the list of usernames
                List<string> usernames = kvp.Value;

                // Calculate the number of likes
                int numberOfLikes = usernames.Count;

                // Store the number of likes and the list of usernames in the cache
                likesByPostIdCache[kvp.Key] = new LikeInfo(numberOfLikes, usernames);
            }
        }

        StateHasChanged(); // Refresh the UI
    }

   
    private async Task DeletePost(int postId)
    {
       
            var success = await PostService.DeletePostAsync(postId);
            if (success)
            {
                // Oppdater listen over innlegg her, eller naviger brukeren til en annen side
                 await GetPostsForBlog(Id);
            }
            else
            {
                // Vis en feilmelding til brukeren
            }
        }
    


    private void CreatePostDialog(string title)
    {
        _post = new SharedModels.Entities.Post()
            {
                Created = DateTime.Now,
               
            };

        // Overfør verdier fra '_post' til '_viewEditPost'
        _viewEditPost = new PostEditViewModel()
            {
                BlogId = Id,
                IsCommentAllowed = true,
                Title = "", 
                Content = "",
                Created = _post.Created
            };

        _titleDialog = "Create";
        _dialog.Show();
    }

    private void EditPostDialog(string title, int postId, SharedModels.Entities.Post post)
    {
        _post = post;
        _viewEditPost = new PostEditViewModel()
            {
                PostId = postId, // Sett postens ID
                BlogId = Id,
                Title = post.Title,
                Content = post.Content,
                Created = post.Created,
                IsCommentAllowed = post.IsCommentAllowed
                    
            };
        // Legg til loggmeldinger for å sjekke verdier
        Console.WriteLine("EditPostDialog - Start");
       
        _titleDialog = title;
        _dialog.Show();
    }

    private async Task HandleImageUploadAsync(string base64Image)
    {
        // Do something with the base64Image, e.g., set it in _viewEditPost
        _viewEditPost.ImageBase64 = base64Image;
    }



    void CancelDialog()
    {
        _dialog.CloseDialog();
    }

    private void NavigateToComments(int postId)
    {
        NavigationManager.NavigateTo($"/comment/{postId}");

    }

    private async Task ToggleLikePost(SharedModels.Entities.Post post)
    {
        if (!likesByPostIdCache.TryGetValue(post.PostId, out var likeInfo))
        {
            // If there's no entry in the cache, create one
            likeInfo = new LikeInfo
                {
                    LikesCount = 0,
                    Usernames = new List<string>()
                };
            likesByPostIdCache[post.PostId] = likeInfo;
        }

        if (likeStatusCache.TryGetValue(post.PostId, out var isLiked) && isLiked)
        {
            // If the post is already liked, decrement the like count
            likeInfo.LikesCount--;
            // Remove the username from the list of liked users
            likeInfo.Usernames.Remove(_username);

        }
        else
        {
            // If the post is not liked, increment the like count
            likeInfo.LikesCount++;
            // Add the username to the list of liked users
            likeInfo.Usernames.Add(_username);

        }
        await PostService.LikePostAsync(post.PostId);
        // Toggle the like status
        likeStatusCache[post.PostId] = !isLiked;

        // Refresh the UI
        StateHasChanged();
    }


    private int GetLikesCount(int postId)
    {
        if (likesByPostIdCache.TryGetValue(postId, out var likeInfo))
        {
            return likeInfo.LikesCount;
        }
        return 0; // Default to 0 likes if not found
    }
    private List<string> GetLikedUsernames(int postId)
    {
        if (likesByPostIdCache.TryGetValue(postId, out var likeInfo))
        {
            return likeInfo.Usernames;
        }
        return new List<string>(); // Return an empty list if not found
    }

    private void ToggleShowLikedUsernames(int postId)
    {
        if (showLikedUsernames.ContainsKey(postId))
        {
            showLikedUsernames[postId] = !showLikedUsernames[postId];
        }
        else
        {
            showLikedUsernames[postId] = true;
        }
    }

    public class LikeInfo
    {
        public int LikesCount { get; set; }
        public List<string> Usernames { get; set; }

        public LikeInfo(int likesCount, List<string> usernames)
        {
            LikesCount = likesCount;
            Usernames = usernames;
        }
        public LikeInfo()
        {
            LikesCount = 0;
            Usernames = new List<string>();
        }
    }

}


