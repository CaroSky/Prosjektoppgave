@using SharedModels.Entities
@using SharedModels.ViewModels
@using Blazor.Data;

@page "/post/{Id:int}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject PostService PostService

@if (posts == null)
{
    <p>Loading posts...</p>
}

else
{
    <button class="btn btn-success ml-auto" @onclick="@(() => CreatePostDialog("Create"))">Add New Post</button>
    @foreach (var post in posts)
    {
        <div class="post-preview">
            <h4>@post.Title</h4>
            <p>@post.Content</p>
            <p>@post.Created.ToString("yyyy-MM-dd")</p> 
            <button class="btn btn-primary" @onclick="@(() => ViewPost(post.PostId))">View</button>
            <button class="btn btn-secondary" @onclick="@(() => EditPostDialog("Update", post.PostId, post))">Edit</button>

            <button class="btn btn-danger" @onclick="@(() => DeletePost(post.PostId))">Delete</button>
        </div>
    }
   


}
<PostDialogBox Title="@_titleDialog"
               post="@_viewEditPost"
               OnCancel="CancelPostDialog"
               OnSave="OnSavePostDialog"
@ref="_dialog"></PostDialogBox>


@code {
    [Parameter]
    public int Id { get; set; }
    //private List<SharedModels.Entities.Post> posts;
    private SharedModels.Entities.Post _post = new SharedModels.Entities.Post();
    private PostCreateViewModel _viewPost = new PostCreateViewModel();
    private PostEditViewModel _viewEditPost = new SharedModels.ViewModels.PostEditViewModel();
    private string _titleDialog;
    private PostDialogBox _dialog;

    //private IEnumerable<Post> posts;
    private IEnumerable<SharedModels.Entities.Post> posts;

    protected override async Task OnInitializedAsync()
    {
        await GetPostsForBlog(Id); //posts
        
        _titleDialog = "title";
    }

    private void CancelPostDialog()
    {
        _dialog.CloseDialog();
    }
   
    private async Task OnSavePostDialog()
    {
        if (_titleDialog == "Create")
        {
            // Konverter fra PostEditViewModel til PostCreateViewModel
            var createViewModel = new PostCreateViewModel
                {
                    Title = _viewEditPost.Title,
                    Content = _viewEditPost.Content,
                    BlogId = _viewEditPost.BlogId,
                    IsCommentAllowed = _viewEditPost.IsCommentAllowed
                };

            Console.WriteLine("Creating new post...");
            await PostService.CreatePostAsync(createViewModel);
            Console.WriteLine("New post created.");
        }
        else if (_titleDialog == "Update")
        {
            // Send PostEditViewModel direkte
            Console.WriteLine($"Updating post with ID {_viewEditPost.PostId}...");
            await PostService.UpdatePostAsync(_viewEditPost.PostId, _viewEditPost);
            Console.WriteLine($"Post with ID {_viewEditPost.PostId} updated.");
        }

        await GetPostsForBlog(Id);
        Console.WriteLine("Posts updated after save operation.");
        _dialog.CloseDialog();
        Console.WriteLine("Dialog closed.");
    }


    private async Task GetPostsForBlog(int blogId)
    {
        var response = await HttpClient.GetAsync($"api/post/{blogId}/posts");
        if (response.IsSuccessStatusCode)
        {
            var postIndexViewModel = await response.Content.ReadFromJsonAsync<PostIndexViewModel>();
            posts = postIndexViewModel.Posts;
        }
        else
        {
            // Håndter feilen, kanskje ved å vise en feilmelding til brukeren
        }
    }
    private void ViewPost(int postId)
    {
        NavigationManager.NavigateTo($"/postdetails/{postId}");
    }


    private async Task DeletePost(int postId)
    {
        // Kall PostService for å slette innlegget
        // Oppdater listen etter sletting
    }

    private void CreatePostDialog(string title)
    {
        _post = new SharedModels.Entities.Post()
            {
                Created = DateTime.Now,
                // Sett andre relevante verdier for 'Post' entiteten
            };

        // Overfør verdier fra '_post' til '_viewEditPost'
        _viewEditPost = new PostEditViewModel()
            {
                BlogId = Id,
                IsCommentAllowed = true,
                Title = "", // Standard verdi siden det er et nytt innlegg
                Content = "", // Standard verdi siden det er et nytt innlegg
                Created = _post.Created
            };

        _titleDialog = "Create";
        _dialog.Show();
    }

    private void EditPostDialog(string title, int postId, SharedModels.Entities.Post post)
    {
        _post = post;
        _viewEditPost = new PostEditViewModel()
            {
                PostId = postId, // Sett postens ID
                BlogId = Id,
                Title = post.Title,
                Content = post.Content,
                Created = post.Created,
                IsCommentAllowed = post.IsCommentAllowed
            };
        // Legg til loggmeldinger for å sjekke verdier
        Console.WriteLine("EditPostDialog - Start");
        Console.WriteLine($"_post.PostId: {_post.PostId}");
        Console.WriteLine($"_post.Title: {_post.Title}");
        Console.WriteLine($"_post.Content: {_post.Content}");
        Console.WriteLine($"_post.IsCommentAllowed: {_post.IsCommentAllowed}");
        Console.WriteLine($"_viewEditPost.PostId: {_viewEditPost.PostId}");
        Console.WriteLine($"_viewEditPost.Title: {_viewEditPost.Title}");
        Console.WriteLine($"_viewEditPost.Content: {_viewEditPost.Content}");
        Console.WriteLine($"_viewEditPost.IsCommentAllowed: {_viewEditPost.IsCommentAllowed}");
        Console.WriteLine("EditPostDialog - End");
        _titleDialog = title;
        _dialog.Show();
    }



    void CancelDialog()
    {
        _dialog.CloseDialog();
    }

}


