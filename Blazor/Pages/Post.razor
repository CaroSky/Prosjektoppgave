@using SharedModels.Entities
@using SharedModels.ViewModels
@using Blazor.Data;
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using WebAPI.Migrations

@page "/post/{Id:int}"

@inject NavigationManager NavigationManager
@inject PostService PostService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous">
</head>

<div class="d-flex justify-content-between">
        <h3>Posts for Blog "@_blogTitle"</h3>
        <button class="btn btn-primary" @onclick="@(() => NavigateToBlogs())">Go back to blog list</button>
</div>



@if (posts == null)
{
    <p>Loading posts...</p>
}

else
{

    @if (allowed && user.Identity.IsAuthenticated)
    {

        <button class="btn btn-success ml-auto" @onclick="@(() => CreatePostDialog("Create"))">Add New Post</button>
    }
    @foreach (var post in posts)
    {
        <div class="card post-preview mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6"> <!-- Adjust the column size as needed -->
                        <h4 class="card-title">@post.Post.Title</h4>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-1">
                                <label for="likes">@post.Post.CountLike Likes</label>
                            </div>
                            @if (user.Identity.IsAuthenticated && post.Post.OwnerId != _userId)
                        {
                            <div class="col-md-1">
                                <button class="btn btn-success" @onclick="@(() => Like(post))">
                                    <i class="fas fa-thumbs-up"></i>
                                </button>
                            </div>
                        <div class="col-md-1">
                            <label for="dislikes">@post.Like</label>
                        </div>
                        }
                        </div>
                    </div>
                </div>
                <p class="card-text">@post.Post.Content</p>
                <p class="card-text"><small class="text-muted">@post.Post.OwnerUsername posted on @post.Post.Created.ToString("yyyy-MM-dd")</small></p>

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" disabled="disabled" @bind="post.Post.IsCommentAllowed"/>
                    <label class="form-check-label" for="commentCheckbox">Allow Comments</label>
                </div>

                <button class="btn btn-primary mt-2" @onclick="@(() => NavigateToComments(post.Post.PostId))">See Comments</button>

                @if (post.Post.OwnerId == _userId)
                {
                    <div class="mt-2">
                        <button class="btn btn-secondary" @onclick="@(() => EditPostDialog("Update", post.Post.PostId, post.Post))">Edit</button>
                        <button class="btn btn-danger ml-2" @onclick="@(() => DeletePost(post.Post.PostId))">Delete</button>
                    </div>
                }
            </div>
        </div>

    }
   


}
<PostDialogBox Title="@_titleDialog"
               post="@_viewEditPost"
               OnCancel="CancelPostDialog"
               OnSave="OnSavePostDialog"
@ref="_dialog"></PostDialogBox>


@code {
    [Parameter]
    public int Id { get; set; }

    private SharedModels.Entities.Post _post = new SharedModels.Entities.Post();
    private PostCreateViewModel _viewPost = new PostCreateViewModel();
    private PostEditViewModel _viewEditPost = new SharedModels.ViewModels.PostEditViewModel();
    private string _titleDialog;
    private PostDialogBox _dialog;
    private PostIndexViewModel postIndexViewModel;
    private bool allowed;
    private IEnumerable<PostWithLike> posts;
    private ClaimsPrincipal user;
    private string _username;
    private string _userId;
    private string _blogTitle;
    private bool _isInSearchMode;
    private string _searchQuery;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        _username = user?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
        _userId = user?.FindFirst(JwtRegisteredClaimNames.NameId)?.Value;
        await GetPostsForBlog(Id);
        _titleDialog = "title";
    }

    private void CancelPostDialog()
    {
        _dialog.CloseDialog();
    }

    private async Task OnSavePostDialog()
    {
        if (_titleDialog == "Create")
        {
            // Konverter fra PostEditViewModel til PostCreateViewModel
            //EditViewmodel er i dialogboxen siden den inneholder alle verdiene edit og create trenger
            var createViewModel = new PostCreateViewModel
                {
                    Title = _viewEditPost.Title,
                    Content = _viewEditPost.Content,
                    BlogId = _viewEditPost.BlogId,
                    IsCommentAllowed = _viewEditPost.IsCommentAllowed
                };

            Console.WriteLine("Creating new post...");
            await PostService.CreatePostAsync(createViewModel);
            Console.WriteLine("New post created.");
        }
        else if (_titleDialog == "Update")
        {
            // Send PostEditViewModel direkte
            Console.WriteLine($"Updating post with ID {_viewEditPost.PostId}...");
            await PostService.UpdatePostAsync(_viewEditPost.PostId, _viewEditPost);
            Console.WriteLine($"Post with ID {_viewEditPost.PostId} updated.");
        }

        await GetPostsForBlog(Id);
        Console.WriteLine("Posts updated after save operation.");
        _dialog.CloseDialog();
        Console.WriteLine("Dialog closed.");
    }


    private async Task GetPostsForBlog(int blogId)
    {
        Console.WriteLine($"BlogId when getting the posts: {blogId}.");
        Console.WriteLine("Not in search mode");
        var postIndexViewModel = await PostService.GetPostsByBlogIdAsync(blogId);
        posts = postIndexViewModel.Posts;
        allowed = postIndexViewModel.IsPostAllowed;
        _blogTitle = postIndexViewModel.BlogTitle;
    }


   

    private async Task DeletePost(int postId)
    {
       
            var success = await PostService.DeletePostAsync(postId);
            if (success)
            {
                // Oppdater listen over innlegg her, eller naviger brukeren til en annen side
                 await GetPostsForBlog(Id);
            }
            else
            {
                // Vis en feilmelding til brukeren
            }
        }
    


    private void CreatePostDialog(string title)
    {
        _post = new SharedModels.Entities.Post()
            {
                Created = DateTime.Now,
               
            };

        // Overfør verdier fra '_post' til '_viewEditPost'
        _viewEditPost = new PostEditViewModel()
            {
                BlogId = Id,
                IsCommentAllowed = true,
                Title = "", 
                Content = "",
                Created = _post.Created
            };

        _titleDialog = "Create";
        _dialog.Show();
    }

    private void EditPostDialog(string title, int postId, SharedModels.Entities.Post post)
    {
        _post = post;
        _viewEditPost = new PostEditViewModel()
            {
                PostId = postId, // Sett postens ID
                BlogId = Id,
                Title = post.Title,
                Content = post.Content,
                Created = post.Created,
                IsCommentAllowed = post.IsCommentAllowed,
                OwnerId = post.OwnerId,
                OwnerUsername = post.OwnerUsername
                    
            };
        // Legg til loggmeldinger for å sjekke verdier
        Console.WriteLine("EditPostDialog - Start");
       
        _titleDialog = title;
        _dialog.Show();
    }



    void CancelDialog()
    {
        _dialog.CloseDialog();
    }

    private async Task Like(PostWithLike post)
    {
        if (post.Like == "Liked!")
        {
            Console.WriteLine("Deleting like...");
            await PostService.DeleteLikeAsync(post.Post.PostId);
            Console.WriteLine("Like deleted."); 
        }
        else
        {
            Console.WriteLine("Creating new like...");
            await PostService.CreateLikeAsync(post.Post.PostId);
            Console.WriteLine("New like created."); 
        }

        await GetPostsForBlog(Id);
    }

    private void NavigateToComments(int postId)
    {
        NavigationManager.NavigateTo($"/comment/{postId}");
    }

    private void NavigateToBlogs()
    {
        NavigationManager.NavigateTo($"/blogs");
    }

}


